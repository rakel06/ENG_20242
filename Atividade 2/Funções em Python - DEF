1) Crie uma função que receba uma lista de números e retorne uma lista contendo apenas os números 
ímpares.

def numeros_impares(lista):
  impares = []
  for numero in lista:
    if numero % 2 != 0:
      impares.append(numero)
  return impares

impares = [1, 2 , 3, 4, 5, 6, 7, 8, 9, 10]
print(numeros_impares(impares))
_______________________________________________________________________________________________________

2) Escreva uma função que receba uma lista e retorne uma nova lista com o dobro de cada elemento.

def num_dobro(lista):
  dobro = []
  for numero in lista:
    dobro.append(numero * 2)
  return dobro

dobro = [1, 2, 3, 4, 5]
print(num_dobro(dobro))
______________________________________________________________________________________________________

3) Faça uma função que receba uma lista e retorne uma lista sem duplicatas.

def duplicatas(lista):
  sem_duplicatas = []
  for numero in lista:
    if numero not in sem_duplicatas:
      sem_duplicatas.append(numero)
  return sem_duplicatas

sem_duplicatas = [1, 2, 2, 3, 4, 4, 5, 5, 5 , 5 , 5 , 5, 6 , 6]
print(duplicatas(sem_duplicatas))
_______________________________________________________________________________________________________

4) Crie uma função que receba uma lista e um valor divisor e retorne uma lista dos elementos que são 
divisíveis pelo divisor.

def divisivel(lista, divisor):
  divisiveis = []
  for numero in lista:
    if numero % divisor == 0:
      divisiveis.append(numero)
  return divisiveis

lista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
resultado = divisivel(lista, 2)
print(resultado)
_______________________________________________________________________________________________________

5) Escreva uma função que receba duas listas e retorne um conjunto com os elementos que aparecem em 
ambas.

def conjunto(lista1, lista2):
  conjunto = set(lista1) & set(lista2)
  return conjunto

lista1 = [1, 2 , 3 , 4 , 5 , 6]
lista2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
resultado = conjunto(lista1, lista2)
print(resultado)
_______________________________________________________________________________________________________

6) Crie uma função que receba uma lista e retorne uma nova lista com os elementos em ordem inversa.

def ordem_inversa(lista):
  inversa = lista[::-1]
  return inversa

lista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(ordem_inversa(lista))
_______________________________________________________________________________________________________

7) Escreva uma função que receba uma lista de números e retorne uma lista contendo o quadrado de cada
número.

def num_quadrado(lista):
  quadrado = []
  for numero in lista:
    quadrado.append(numero ** 2)
  return quadrado

lista = [1, 2, 3, 4, 5]
print(num_quadrado(lista))
_______________________________________________________________________________________________________

8) Crie uma função que receba uma lista e um valor, e retorne uma lista com os elementos maiores que 
esse valor.

def maiores_que(lista, valor):
  maiores = []
  for numero in lista:
    if numero > valor:
      maiores.append(numero)
  return maiores

lista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
resultado = maiores_que(lista, 5)
print(resultado)
_________________________________________________________________________________________________

9) Escreva uma função que receba duas listas e retorne uma lista dos elementos que estão em 
apenas uma das listas.

def elementos_unicos(lista1, lista2):
    set1 = set(lista1)
    set2 = set(lista2)
    unicos = list(set1 ^ set2)
    return unicos

lista1 = [1, 2, 3, 4, 5]
lista2 = [3, 4, 5, 6, 7]
resultado = elementos_unicos(lista1, lista2)
print(resultado)
_______________________________________________________________________________________________________

10) Faça uma função que receba uma lista e retorne um conjunto dos elementos únicos.

def conjunto_unicos(lista):
  conjunto = set(lista) # Converte a lista para um conjunto
  return conjunto

lista = [1, 2, 2, 3, 4, 4, 5, 5, 5 , 5 , 5 , 5, 6 , 6]
print(conjunto_unicos(lista))
_______________________________________________________________________________________________________

11) Crie uma função que receba duas listas e retorne uma lista dos elementos únicos que estão em ambas.

def elementos_unicos(lista1, lista2):
    set1 = set(lista1)
    set2 = set(lista2)
    unicos = list(set1 & set2)
    return unicos

lista1 = [1, 2, 3, 4, 5]
lista2 = [3, 4, 5, 6, 7]
resultado = elementos_unicos(lista1, lista2)
print(resultado)
_______________________________________________________________________________________________________

12) Escreva uma função que receba uma lista e retorne uma lista contendo os elementos que aparecem 
mais de uma vez.

def elementos_repetidos(lista):
  repetidos = []
  for numero in lista:
    if lista.count(numero) > 1 and numero not in repetidos:
      repetidos.append(numero)
  return repetidos

lista = [1, 2, 2, 3, 4, 4, 5, 5, 5 , 5 , 5 , 5, 6 , 6]
print(elementos_repetidos(lista))
_______________________________________________________________________________________________________

13) Faça uma função que receba uma lista de números e retorne uma lista dos números pares.

def numeros_pares(lista):
  pares = []
  for numero in lista:
    if numero % 2 == 0:
      pares.append(numero)
  return pares

lista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(numeros_pares(lista))
_______________________________________________________________________________________________________

14) Escreva uma função que receba uma lista de números e um valor, e retorne uma lista com os índices 
dos elementos maiores que o valor.

def indices_maiores(lista, valor):
  indices = []
  for i in range(len(lista)):
    if lista[i] > valor:
      indices.append(i)
  return indices

lista = [2, 9, 60, 80, 70, 15, 8, 100] 
resultado = indices_maiores(lista, 50)
print(resultado)
_______________________________________________________________________________________________________

15) Crie uma função que receba uma lista de strings e retorne uma lista com o tamanho de cada string.

def palavras(lista):
  tamanho = []
  for palavras in lista:
    tamanho.append(len(palavras))
  return tamanho

lista = ["Olá", "meu", "nome", "é", "Rakel"]
print(palavras(lista))
_______________________________________________________________________________________________________

16) Escreva uma função que receba uma lista de números e retorne uma lista contendo cada número elevado
ao cubo.

def num_cubo(lista):
  cubo = []
  for numero in lista:
    cubo.append(numero ** 3)
  return cubo

lista = [2, 6, 3, 8, 5]
print(num_cubo(lista))
_______________________________________________________________________________________________________

17) Crie uma função que receba uma lista e retorne uma lista de todos os elementos únicos.

def unicos(lista):
  unicos = []
  for numero in lista:
    if lista.count(numero) == 1:
      unicos.append(numero)
  return unicos

lista = [1, 2, 2, 3, 4, 4, 5, 5, 5 , 5 , 5 , 5, 6 , 6]
print(unicos(lista))
_______________________________________________________________________________________________________

18) Escreva uma função que receba uma lista de strings e retorne uma lista contendo as strings que
começam com uma letra maiúscula.

def maiuscula(lista):
  maiuscula = []
  for palavras in lista:
    if palavras[0].isupper():
      maiuscula.append(palavras)
  return maiuscula

lista = ["Amor", "bAnAnA", "CAQUI", "damasco"]
print(maiuscula(lista))
_______________________________________________________________________________________________________

19) Faça uma função que receba uma lista de números e retorne uma lista contendo apenas os múltiplos 
de 3.

def multiplos (lista):
  multiplos = []
  for numero in lista:
    if numero % 3 == 0:
      multiplos.append(numero)
  return multiplos

lista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(multiplos(lista))
_______________________________________________________________________________________________________

20) Escreva uma função que receba duas listas e retorne uma lista com a interseção ordenada de forma 
crescente entre elas.

def intersecao(lista1, lista2):
  interseccao = list(set(lista1) & set(lista2))
  interseccao.sort()
  return interseccao

lista1 = [90, 20, 30, 40, 50] 
lista2 = [30, 40, 50, 60, 90]
print(intersecao(lista1, lista2))
